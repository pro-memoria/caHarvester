
#PASTOR: Code generated by XML::Pastor/1.0.4 at 'Thu Jul  9 15:48:25 2015'

use utf8;
use strict;
use warnings;
no warnings qw(uninitialized);

use XML::Pastor;



#================================================================

package SAN::SCONS::Type::identifier;


our @ISA=qw(XML::Pastor::ComplexType);

SAN::SCONS::Type::identifier->mk_accessors( qw(_href recordId sistemaId));

# Attribute accessor aliases

sub href { &_href; }

SAN::SCONS::Type::identifier->XmlSchemaType( bless( {
         'attributeInfo' => {
                              'href' => bless( {
                                               'class' => 'XML::Pastor::Builtin::anyURI',
                                               'metaClass' => 'SAN::SCONS::Pastor::Meta',
                                               'name' => 'href',
                                               'scope' => 'local',
                                               'targetNamespace' => 'http://san.mibac.it/scons-san/',
                                               'type' => 'anyURI|http://www.w3.org/2001/XMLSchema',
                                               'use' => 'required'
                                             }, 'XML::Pastor::Schema::Attribute' )
                            },
         'attributePrefix' => '_',
         'attributes' => [
                           'href'
                         ],
         'baseClasses' => [
                            'XML::Pastor::ComplexType'
                          ],
         'class' => 'SAN::SCONS::Type::identifier',
         'contentType' => 'complex',
         'elementInfo' => {
                            'recordId' => bless( {
                                                 'class' => 'XML::Pastor::Builtin::NMTOKEN',
                                                 'metaClass' => 'SAN::SCONS::Pastor::Meta',
                                                 'name' => 'recordId',
                                                 'scope' => 'local',
                                                 'targetNamespace' => 'http://san.mibac.it/scons-san/',
                                                 'type' => 'NMTOKEN|http://www.w3.org/2001/XMLSchema'
                                               }, 'XML::Pastor::Schema::Element' ),
                            'sistemaId' => bless( {
                                                  'class' => 'XML::Pastor::Builtin::NMTOKEN',
                                                  'metaClass' => 'SAN::SCONS::Pastor::Meta',
                                                  'name' => 'sistemaId',
                                                  'scope' => 'local',
                                                  'targetNamespace' => 'http://san.mibac.it/scons-san/',
                                                  'type' => 'NMTOKEN|http://www.w3.org/2001/XMLSchema'
                                                }, 'XML::Pastor::Schema::Element' )
                          },
         'elements' => [
                         'recordId',
                         'sistemaId'
                       ],
         'isRedefinable' => 1,
         'metaClass' => 'SAN::SCONS::Pastor::Meta',
         'name' => 'identifier',
         'nameIsAutoGenerated' => 1,
         'scope' => 'local',
         'targetNamespace' => 'http://san.mibac.it/scons-san/'
       }, 'XML::Pastor::Schema::ComplexType' ) );

1;


__END__



=head1 NAME

B<SAN::SCONS::Type::identifier>  -  A class generated by L<XML::Pastor> . 


=head1 ISA

This class descends from L<XML::Pastor::ComplexType>.


=head1 CODE GENERATION

This module was automatically generated by L<XML::Pastor> version 1.0.4 at 'Thu Jul  9 15:48:25 2015'


=head1 ATTRIBUTE ACCESSORS

=over

=item B<_href>(), B<href>()      - See L<XML::Pastor::Builtin::anyURI>.

=back


=head1 CHILD ELEMENT ACCESSORS

=over

=item B<recordId>()      - See L<XML::Pastor::Builtin::NMTOKEN>.

=item B<sistemaId>()      - See L<XML::Pastor::Builtin::NMTOKEN>.

=back


=head1 SEE ALSO

L<XML::Pastor::ComplexType>, L<XML::Pastor>, L<XML::Pastor::Type>, L<XML::Pastor::ComplexType>, L<XML::Pastor::SimpleType>


=cut
